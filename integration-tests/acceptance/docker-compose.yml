version: "3"
services:
  test:
    build:
      context: ../..
      dockerfile: Dockerfile.integration
    depends_on:
      oplogtoredis:
        condition: service_started
      mongo:
        condition: service_healthy
      redis:
        condition: service_started
      redis-sentinel:
        condition: service_started
      redis-sentinel-master:
        condition: service_started
    command:
      - /wait-for.sh
      - --timeout=120
      - mongo:27017
      - '--'
      - /wait-for.sh
      - --timeout=120
      - redis:6379
      - '--'
      - /wait-for.sh
      - --timeout=120
      - redis-sentinel:26379
      - '--'
      - /integration/acceptance/entry.sh
    environment:
      - OTR_MONGO_URL=mongodb://mongo/tests
      - OTR_REDIS_URL=redis-sentinel://redis-sentinel:26379?sentinelMasterId=mymaster,redis://redis
      - MONGO_URL=mongodb://mongo/tests
      - REDIS_URL=redis://redis-sentinel:26379,redis://redis
      - OTR_URL=http://oplogtoredis:9000
  oplogtoredis:
    build:
      context: ../..
      dockerfile: ${OTR_DOCKERFILE}
    environment:
      - OTR_MONGO_URL=mongodb://mongo/tests
      - OTR_REDIS_URL=redis-sentinel://redis-sentinel:26379?sentinelMasterId=mymaster,redis://redis
      - OTR_LOG_DEBUG=true
      - OTR_OPLOG_V2_EXTRACT_SUBFIELD_CHANGES=true
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_started
      redis-sentinel:
        condition: service_started
      redis-sentinel-master:
        condition: service_started
    volumes:
      - ../../scripts/wait-for.sh:/wait-for.sh
    command:
      - /bin/oplogtoredis

  mongo:
    image: mongo:${MONGO_TAG}
    environment:
      MONGO_ARGS: "${MONGO_ARGS}"
    command: "mongod --replSet myapp --port 27017 --bind_ip_all $MONGO_ARGS"
    healthcheck:
      test: test $$(echo "rs.initiate({_id:'myapp',members:[{_id:0,host:\"mongo:27017\"}]}).ok || rs.status().ok" | mongo --port 27017 --quiet) -eq 1
      interval: 10s
      start_period: 30s
    volumes:
      - mongo_data:/data/db

  redis:
    image: redis:${REDIS_TAG}
    logging:
      driver: none

  redis-sentinel-master:
    image: redis:${REDIS_TAG}
    environment:
      - REDIS_REPLICATION_MODE=master

  redis-sentinel:
    image: bitnami/redis-sentinel:latest
    environment:
      - REDIS_SENTINEL_MASTER=redis-sentinel-master

volumes:
  mongo_data:
